apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.Service.ServiceName }}
  namespace: {{ .Values.Service.ServiceGroupNAme }}
spec:
  replicas: {{ .Values.Service.replicaCount }}
  selector:
    matchLabels:
      {{- include "deployment.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "deployment.selectorLabels" . | nindent 8 }}
    spec:
      containers:
        - name: "{{ .Values.Service.ServiceGroupNAme }}-{{ .Values.Service.ServiceName }}-{{ .Values.Service.Environment }}"
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          {{- with .Values.Service.env }}
          env:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.Service.ContainerPort }}
              protocol: TCP
          livenessProbe:
            initialDelaySeconds: {{ .Values.Service.initialDelaySeconds }}
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 1
            httpGet:
              path: /info
              port: http
          resources:
            limits:
              cpu: {{ .Values.Service.cpu }}
              memory: {{ .Values.Service.memory }}
            requests:
              cpu: {{ .Values.Service.cpu }}
              memory: {{ .Values.Service.memory }}
---
apiVersion: v1
kind: Service
metadata:
  namespace: {{ .Values.Service.ServiceGroupNAme }}
  name: {{ .Values.Service.ServiceName }}-clusterip
spec:
  ports:
    - targetPort: {{ .Values.Service.ContainerPort }}
      port: {{ .Values.Service.ContainerPort }}
  type: ClusterIP
  selector:
    {{- include "deployment.selectorLabels" . | nindent 4 }}
---
apiVersion: v1
kind: Service
metadata:
  namespace: {{ .Values.Service.ServiceGroupNAme }}
  name: {{ .Values.Service.ServiceName }}-nodeport
spec:
  ports:
    - port: {{ .Values.Service.ContainerPort }}
      targetPort: {{ .Values.Service.ContainerPort }}
      protocol: TCP
  type: NodePort
  selector:
    {{- include "deployment.selectorLabels" . | nindent 4 }}
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: {{ .Values.Service.ServiceName }}-internalhttpingress
  namespace: {{ .Values.Service.ServiceGroupNAme }}
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internal
    alb.ingress.kubernetes.io/tags: Team={{ .Values.Service.ServiceGroupNAme }}
    alb.ingress.kubernetes.io/subnets: {{ .Values.Service.PrivLBSubnets }}
    alb.ingress.kubernetes.io/load-balancer-name: {{ .Values.Service.ServiceGroupNAme }}-priv
    alb.ingress.kubernetes.io/group.name: {{ .Values.Service.ServiceGroupNAme }}-priv
    alb.ingress.kubernetes.io/healthcheck-path: /info
spec:
  rules:
    - host: {{ .Values.Service.ServiceDnsNamePriv }}
      http:
        paths:
          - backend:
              serviceName: {{ .Values.Service.ServiceName }}-nodeport
              servicePort: {{ .Values.Service.ContainerPort }}
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: {{ .Values.Service.ServiceName }}-pubhttpsingress
  namespace: {{ .Values.Service.ServiceGroupNAme }}
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/tags: Team={{ .Values.Service.ServiceGroupNAme }}
    alb.ingress.kubernetes.io/subnets: {{ .Values.Service.PubLBSubnets }}
    alb.ingress.kubernetes.io/load-balancer-name: {{ .Values.Service.ServiceGroupNAme }}-pub
    alb.ingress.kubernetes.io/group.name: {{ .Values.Service.ServiceGroupNAme }}-pub
    alb.ingress.kubernetes.io/scheme:  internet-facing
    alb.ingress.kubernetes.io/backend-protocol: HTTP
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443}]'
    alb.ingress.kubernetes.io/certificate-arn: {{ .Values.Service.certificatearn }}
    alb.ingress.kubernetes.io/healthcheck-path: /info
spec:
  rules:
    - host: {{ .Values.Service.ServiceDnsNamePub }}
      http:
        paths:
          - backend:
              serviceName: {{ .Values.Service.ServiceName }}-nodeport
              servicePort: {{ .Values.Service.ContainerPort }}
